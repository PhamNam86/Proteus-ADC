CCS PCM C Compiler, Version 4.074, 22034               09-Jun-22 15:03

               Filename: ADC.lst

               ROM used: 1127 words (14%)
                         Largest free fragment is 2048
               RAM used: 10 (3%) at main() level
                         30 (8%) worst case
               Stack:    5 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   1DF
0003:  NOP
.................... #include <16f887.h> 
.................... //////// Standard Header file for the PIC16F887 device //////////////// 
.................... #device PIC16F887 
.................... #list 
....................  
.................... #device *=16 adc =10 
.................... #FUSES HS, NOWDT, NOPUT, NOLVP 
.................... #use delay(clock =8M) 
.................... #include <lcd.h> 
.................... #define _lcd_h_ 
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float32)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float32)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[4] = { 
....................       -0.499999993585, 
....................        0.041666636258, 
....................       -0.0013888361399, 
....................        0.00002476016134 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 3; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[4] = { 
....................       -0.499999993585, 
....................        0.041666636258, 
....................       -0.0013888361399, 
....................        0.00002476016134 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 3; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[4] = { 
....................       -0.499999993585, 
....................        0.041666636258, 
....................       -0.0013888361399, 
....................        0.00002476016134 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 3; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #use delay(clock=4000000) 
*
0032:  MOVLW  2E
0033:  MOVWF  04
0034:  BCF    03.7
0035:  MOVF   00,W
0036:  BTFSC  03.2
0037:  GOTO   046
0038:  MOVLW  01
0039:  MOVWF  78
003A:  CLRF   77
003B:  DECFSZ 77,F
003C:  GOTO   03B
003D:  DECFSZ 78,F
003E:  GOTO   03A
003F:  MOVLW  4A
0040:  MOVWF  77
0041:  DECFSZ 77,F
0042:  GOTO   041
0043:  GOTO   044
0044:  DECFSZ 00,F
0045:  GOTO   038
0046:  RETLW  00
.................... void lcd_init(void);             // Ham dung de khoi dong C.LCD. 
.................... byte lcd_read_byte(void);         // Ham xu ly doc thong tin (dang 8 bit) tu thong tin dang 4 bit tu C.LCD. 
.................... byte lcd_read_nibble(void);         // Ham doc thong tin (dang 4 bit / nibble) tu C.LCD. 
.................... void lcd_send_byte(byte address, byte n);   // Ham gui thong tin (byte) toi C.LCD tai dia chi (address). 
.................... void lcd_send_nibble(byte n);      // Ham gui thong tin (dang 4 bit / nibble) sang C.LCD. 
.................... void lcd_gotoxy(byte x, byte y);   // Ham thiet lap vi tri ghi tren C.LCD. 
.................... char lcd_getc(byte x, byte y);      // Ham tra ve ky tu tai vi tri (x,y) tren C.LCD. 
.................... void lcd_putc(char c);            // Ham se hien thi ky tu c tai vi tri ke tiep tren C.LCD. 
.................... // Khai bao bien. 
.................... // Dinh nghia cac thong so. 
.................... //!#define LCD_RS_PIN         PIN_D1   // Cac ket noi C.LCD voi vi dieu khien. 
.................... //!#define LCD_RW_PIN         PIN_D2 
.................... //!#define LCD_ENABLE_PIN     PIN_D3 
.................... //!#define LCD_DATA4          PIN_D4 
.................... //!#define LCD_DATA5          PIN_D5 
.................... //!#define LCD_DATA6          PIN_D6 
.................... //!#define LCD_DATA7          PIN_D7  
....................  
.................... #define LCD_RS_PIN         PIN_D0   // Cac ket noi C.LCD voi vi dieu khien. 
.................... #define LCD_RW_PIN         PIN_D1 
.................... #define LCD_ENABLE_PIN     PIN_D2 
.................... #define LCD_DATA4          PIN_D4 
.................... #define LCD_DATA5          PIN_D5 
.................... #define LCD_DATA6          PIN_D6 
.................... #define LCD_DATA7          PIN_D7 
....................  
.................... /* 
.................... #define LCD_RS_PIN         PIN_D1   // Cac ket noi C.LCD voi vi dieu khien. 
.................... #define LCD_RW_PIN      PIN_D2 
.................... #define LCD_ENABLE_PIN  PIN_D3 
.................... #define LCD_DATA4       PIN_D4 
.................... #define LCD_DATA5       PIN_D5 
.................... #define LCD_DATA6       PIN_D6 
.................... #define LCD_DATA7       PIN_D7   
.................... */ 
.................... #define lcd_output_enable(x)   output_bit(LCD_ENABLE_PIN, x)   // Lenh dieu khien chan LCD_ENABLE_PIN. 
.................... #define lcd_enable_tris()   output_drive(LCD_ENABLE_PIN) 
....................  
.................... #define lcd_output_rs(x)   output_bit(LCD_RS_PIN, x)   // Lenh dieu khien chan LCD_RS_PIN. 
.................... #define lcd_rs_tris()      output_drive(LCD_RS_PIN) 
....................  
.................... #define lcd_output_rw(x)   output_bit(LCD_RW_PIN, x)   // Lenh dieu khien chan LCD_RW_PIN 
.................... #define lcd_rw_tris()      output_drive(LCD_RW_PIN) 
....................  
.................... #define lcd_line_one   0x00    // Dia chi RAM C.LCD cho hang thu 1. 
.................... #define lcd_line_two   0x40    // Dia chi RAM C.LCD cho hang thu 2. 
.................... #define lcd_line_three   0x14 
.................... #define lcd_line_four   0x54 
.................... #define LCD_TYPE 0x02           // Thong tin cau hinh C.LCD: 0x00=5x7, 0x01=5x10, 0x02=2 lines 
....................  
.................... // Dinh nghia cac hang so. 
.................... byte const LCD_INIT_STRING[4] = {0x28 | (LCD_TYPE << 2), 0x0C, 0x01, 0x06}; 
....................         // Cac byte nay can thiet de gui toi C.LCD, dung de khoi dong cau hinh hoat dong cho C.LCD. 
....................       // Byte 1: 0x20 | (LCD_TYPE << 2) - So bit du lieu giao tiep (DL), so dong hien thi (N), kieu ky tu (F). 
....................       //         0 0 1 DL N F x x (DL: Data Length, N: Number Line, F: Font). 
....................          // Truong hop 1: 0x20 - 4 bit / 1 dong / 5 x 7. 
....................          // Truong hop 2: 0x24 - 4 bit / 1 dong / 5 x 10. 
....................          // Truong hop 3: 0x28 - 4 bit / 2 dong / 5 x 7. 
....................       // Byte 2: 0x0C - Dieu khien hien thi (Bat hien thi, tat con tro, tat nhap nhay con tro). 
....................       //         0 0 0 0 1 D C B (D: Display, C: Cursor, B: Blink). 
....................       // Byte 3: 0x01 - Xoa hien thi va tra con tro ve dau dong. 
....................       // Byte 4: 0x06 - Dat che do dau vao (Che do tang dia chi, tat dich chuyen hien thi). 
....................       //         0 0 0 0 0 1 I/D S (I/D: Increment/Decrement, S: Shift). 
....................       // Byte 5: .... - Doi con tro / hien thi. 
....................       //         0 0 0 1 S/C R/L x x (S/C: Screen/Cursor, R/L: Right/Left). 
....................  
.................... // *************************************************** 
.................... void lcd_init(void)    // Ham dung de khoi dong C.LCD. 
.................... { 
.................... // Khai bao bien. 
.................... byte i; 
.................... // Dinh nghia ham. 
.................... output_drive(LCD_DATA4);   // Thiet lap chan port (Data) o che do ngo ra. 
*
00FA:  BSF    03.5
00FB:  BCF    08.4
.................... output_drive(LCD_DATA5); 
00FC:  BCF    08.5
.................... output_drive(LCD_DATA6); 
00FD:  BCF    08.6
.................... output_drive(LCD_DATA7); 
00FE:  BCF    08.7
....................  
.................... lcd_enable_tris();         // Thiet lap chan port (Control: EN, RS, RW) o che do ngo ra. 
00FF:  BCF    08.2
.................... lcd_rs_tris(); 
0100:  BCF    08.0
.................... lcd_rw_tris(); 
0101:  BCF    08.1
....................  
.................... lcd_output_rs(0);         // RS = 0 - Databus = Bus lenh. 
0102:  BCF    03.5
0103:  BCF    08.0
0104:  BSF    03.5
0105:  BCF    08.0
.................... lcd_output_rw(0);         // RW = 0 - Ghi thong tin vao C.LCD. 
0106:  BCF    03.5
0107:  BCF    08.1
0108:  BSF    03.5
0109:  BCF    08.1
.................... lcd_output_enable(0);      // EN = 0 - Cam truy xuat C.LCD. 
010A:  BCF    03.5
010B:  BCF    08.2
010C:  BSF    03.5
010D:  BCF    08.2
....................  
.................... delay_ms(15);   // Tao thoi gian tre 15ms (Thoi gian de LCD tu reset khi moi duoc cap nguon). 
010E:  MOVLW  0F
010F:  BCF    03.5
0110:  MOVWF  2E
0111:  CALL   032
....................  
.................... for(i=1;i<=3;i++)         // Doan lenh khoi dong C.LCD o che do 8 bit duoc thuc hien 3 lan lien tiep 
0112:  MOVLW  01
0113:  MOVWF  23
0114:  MOVF   23,W
0115:  SUBLW  03
0116:  BTFSS  03.0
0117:  GOTO   120
....................    {                  // tai thoi diem ban dau (de dam bao cho C.LCD hoat dong on dinh trong  
....................    lcd_send_nibble(0x03);    // truong hop khi cung cap nguon cho C.LCD ma dien ap nguon tang len cham). 
0118:  MOVLW  03
0119:  MOVWF  35
011A:  CALL   047
....................    delay_ms(5);         // RS = 0, RW = 0, D7 - D4 = 0011 (0x03) -> DL = 1 (8 bit). 
011B:  MOVLW  05
011C:  MOVWF  2E
011D:  CALL   032
....................    }                  // Do co BF (Busy Flag) chua kiem tra duoc trong thoi diem nay, nen phai  
011E:  INCF   23,F
011F:  GOTO   114
....................                      // thuc hien 3 lan (xem luu do khoi dong C.LCD cua nha san xuat). 
....................  
.................... lcd_send_nibble(0x02);      // Doan lenh khoi dong C.LCD o che do 4 bit. Tu luc nay thi 4 bit cao duoc ghi 
0120:  MOVLW  02
0121:  MOVWF  35
0122:  CALL   047
....................                      // ra truoc tien, sau do la 4 bit thap. 
....................                      // RS = 0, RW = 0, D7 - D4 = 0010 (0x02) -> DL = 0 (4 bit). 
....................                      // Co BF (Busy Flag) co the bat dau kiem tra duoc tu luc nay. 
....................  
.................... for(i=0;i<=3;i++) 
0123:  CLRF   23
0124:  MOVF   23,W
0125:  SUBLW  03
0126:  BTFSS  03.0
0127:  GOTO   131
....................    lcd_send_byte(0,LCD_INIT_STRING[i]);   // Goi ham truyen thong tin (lenh) sang C.LCD. 
0128:  MOVF   23,W
0129:  CALL   004
012A:  MOVWF  24
012B:  CLRF   32
012C:  MOVF   24,W
012D:  MOVWF  33
012E:  CALL   0A3
012F:  INCF   23,F
0130:  GOTO   124
.................... }                                 // Lenh: Thiet lap cau hinh hoat dong cho C.LCD. 
0131:  BCF    0A.3
0132:  BCF    0A.4
0133:  GOTO   219 (RETURN)
....................  
.................... // *************************************************** 
.................... byte lcd_read_byte(void)   // Ham xu ly doc thong tin (dang 8 bit) tu thong tin dang 4 bit tu C.LCD. 
.................... { 
.................... // Khai bao bien. 
.................... byte low,high; 
.................... // Dinh nghia ham. 
.................... output_float(LCD_DATA4);   // Thiet lap chan port o che do ngo vao. 
*
00A6:  BSF    08.4
.................... output_float(LCD_DATA5); 
00A7:  BSF    08.5
.................... output_float(LCD_DATA6); 
00A8:  BSF    08.6
.................... output_float(LCD_DATA7); 
00A9:  BSF    08.7
....................  
.................... lcd_output_rw(1);         // RW = 1 - Doc thong tin tu C.LCD. 
00AA:  BCF    03.5
00AB:  BSF    08.1
00AC:  BSF    03.5
00AD:  BCF    08.1
....................                   // Tien hanh doc 4 bit cao cua thong tin tu C.LCD. 
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
00AE:  NOP
.................... lcd_output_enable(1);      // EN = 1 - Cho phep truy xuat C.LCD. 
00AF:  BCF    03.5
00B0:  BSF    08.2
00B1:  BSF    03.5
00B2:  BCF    08.2
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
00B3:  NOP
.................... high = lcd_read_nibble();   // Cat tam 4 bit du lieu (4 bit cao). 
00B4:  BCF    03.5
00B5:  CALL   072
00B6:  MOVF   78,W
00B7:  MOVWF  35
.................... lcd_output_enable(0);      // EN = 0 - Cam truy xuat C.LCD. 
00B8:  BCF    08.2
00B9:  BSF    03.5
00BA:  BCF    08.2
....................                   // Tien hanh doc 4 bit thap cua thong tin tu C.LCD. 
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
00BB:  NOP
.................... lcd_output_enable(1);      // EN = 1 - Cho phep truy xuat C.LCD. 
00BC:  BCF    03.5
00BD:  BSF    08.2
00BE:  BSF    03.5
00BF:  BCF    08.2
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
00C0:  NOP
.................... low = lcd_read_nibble();   // Cat tam 4 bit du lieu (4 bit thap). 
00C1:  BCF    03.5
00C2:  CALL   072
00C3:  MOVF   78,W
00C4:  MOVWF  34
.................... lcd_output_enable(0);      // EN = 0 - Cam truy xuat C.LCD. 
00C5:  BCF    08.2
00C6:  BSF    03.5
00C7:  BCF    08.2
....................  
.................... output_drive(LCD_DATA4);   // Thiet lap chan port o che do ngo ra. 
00C8:  BCF    08.4
.................... output_drive(LCD_DATA5); 
00C9:  BCF    08.5
.................... output_drive(LCD_DATA6); 
00CA:  BCF    08.6
.................... output_drive(LCD_DATA7); 
00CB:  BCF    08.7
....................  
.................... return((high<<4) | low);   // Tra ve ket qua du lieu (dang 8 bit). 
00CC:  BCF    03.5
00CD:  SWAPF  35,W
00CE:  MOVWF  77
00CF:  MOVLW  F0
00D0:  ANDWF  77,F
00D1:  MOVF   77,W
00D2:  IORWF  34,W
00D3:  MOVWF  78
.................... } 
....................  
.................... // *************************************************** 
.................... byte lcd_read_nibble(void)   // Ham doc thong tin (dang 4 bit / nibble) tu C.LCD. 
.................... { 
.................... // Khai bao bien. 
.................... byte n = 0x00;   // Mac dinh gia tri ban dau cho noi chua se thong tin. 
*
0072:  CLRF   36
.................... // Dinh nghia ham. 
.................... n |= input(LCD_DATA4);         // Doc lan luot cac bit tu bus du lieu. 
0073:  BSF    03.5
0074:  BSF    08.4
0075:  MOVLW  00
0076:  BCF    03.5
0077:  BTFSC  08.4
0078:  MOVLW  01
0079:  IORWF  36,F
.................... n |= input(LCD_DATA5) << 1; 
007A:  BSF    03.5
007B:  BSF    08.5
007C:  MOVLW  00
007D:  BCF    03.5
007E:  BTFSC  08.5
007F:  MOVLW  01
0080:  MOVWF  77
0081:  BCF    03.0
0082:  RLF    77,F
0083:  MOVF   77,W
0084:  IORWF  36,F
.................... n |= input(LCD_DATA6) << 2; 
0085:  BSF    03.5
0086:  BSF    08.6
0087:  MOVLW  00
0088:  BCF    03.5
0089:  BTFSC  08.6
008A:  MOVLW  01
008B:  MOVWF  77
008C:  RLF    77,F
008D:  RLF    77,F
008E:  MOVLW  FC
008F:  ANDWF  77,F
0090:  MOVF   77,W
0091:  IORWF  36,F
.................... n |= input(LCD_DATA7) << 3; 
0092:  BSF    03.5
0093:  BSF    08.7
0094:  MOVLW  00
0095:  BCF    03.5
0096:  BTFSC  08.7
0097:  MOVLW  01
0098:  MOVWF  77
0099:  RLF    77,F
009A:  RLF    77,F
009B:  RLF    77,F
009C:  MOVLW  F8
009D:  ANDWF  77,F
009E:  MOVF   77,W
009F:  IORWF  36,F
....................  
.................... return(n);   // Tra ve ket qua doc duoc (data = 0000 xxxx). 
00A0:  MOVF   36,W
00A1:  MOVWF  78
.................... } 
00A2:  RETLW  00
....................  
.................... // *************************************************** 
.................... void lcd_send_byte(byte address, byte n)   // Ham gui thong tin (byte) toi C.LCD tai dia chi (address). 
.................... {                                 // address = 0: Lenh / 1: Du lieu. 
....................                                  // byte = Thong tin can gui (8 bit). 
.................... // Khai bao bien. 
....................  
.................... // Dinh nghia ham.   
.................... lcd_output_rs(0);      // RS = 0 - Databus = Bus lenh. 
00A3:  BCF    08.0
00A4:  BSF    03.5
00A5:  BCF    08.0
.................... while(bit_test(lcd_read_byte(),7));   // Cho Busy Flag = 0 (C.LCD da xu ly xong). 
*
00D4:  MOVF   78,W
00D5:  MOVWF  34
00D6:  BTFSS  34.7
00D7:  GOTO   0DA
00D8:  BSF    03.5
00D9:  GOTO   0A6
.................... lcd_output_rs(address);   // RS = address - Databus = Bus lenh/du lieu. 
00DA:  MOVF   32,F
00DB:  BTFSS  03.2
00DC:  GOTO   0DF
00DD:  BCF    08.0
00DE:  GOTO   0E0
00DF:  BSF    08.0
00E0:  BSF    03.5
00E1:  BCF    08.0
.................... delay_cycles(1);      // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
00E2:  NOP
.................... lcd_output_rw(0);      // RW = 0 - Ghi thong tin vao C.LCD. 
00E3:  BCF    03.5
00E4:  BCF    08.1
00E5:  BSF    03.5
00E6:  BCF    08.1
.................... delay_cycles(1);      // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
00E7:  NOP
.................... lcd_output_enable(0);   // EN = 0 - Cam truy xuat C.LCD. 
00E8:  BCF    03.5
00E9:  BCF    08.2
00EA:  BSF    03.5
00EB:  BCF    08.2
.................... lcd_send_nibble(n >> 4);   // Goi ham truyen 4 bit cao sang C.LCD. 
00EC:  BCF    03.5
00ED:  SWAPF  33,W
00EE:  MOVWF  34
00EF:  MOVLW  0F
00F0:  ANDWF  34,F
00F1:  MOVF   34,W
00F2:  MOVWF  35
00F3:  CALL   047
.................... lcd_send_nibble(n & 0x0F);   // Goi ham truyen 4 bit thap sang C.LCD. 
00F4:  MOVF   33,W
00F5:  ANDLW  0F
00F6:  MOVWF  34
00F7:  MOVWF  35
00F8:  CALL   047
.................... } 
00F9:  RETLW  00
....................  
.................... // *************************************************** 
.................... void lcd_send_nibble(byte n)   // Ham gui thong tin (dang 4 bit / nibble) sang C.LCD. 
.................... {                        // n = Thong tin can gui. 4 bit can gui phai nam vi tri 4 bit thap. 
.................... // Khai bao bien. 
....................  
.................... // Dinh nghia ham.  
.................... output_bit(LCD_DATA4, bit_test(n, 0));   // Xuat lan luot cac bit len bus du lieu. 
*
0047:  BTFSC  35.0
0048:  GOTO   04B
0049:  BCF    08.4
004A:  GOTO   04C
004B:  BSF    08.4
004C:  BSF    03.5
004D:  BCF    08.4
.................... output_bit(LCD_DATA5, bit_test(n, 1)); 
004E:  BCF    03.5
004F:  BTFSC  35.1
0050:  GOTO   053
0051:  BCF    08.5
0052:  GOTO   054
0053:  BSF    08.5
0054:  BSF    03.5
0055:  BCF    08.5
.................... output_bit(LCD_DATA6, bit_test(n, 2)); 
0056:  BCF    03.5
0057:  BTFSC  35.2
0058:  GOTO   05B
0059:  BCF    08.6
005A:  GOTO   05C
005B:  BSF    08.6
005C:  BSF    03.5
005D:  BCF    08.6
.................... output_bit(LCD_DATA7, bit_test(n, 3)); 
005E:  BCF    03.5
005F:  BTFSC  35.3
0060:  GOTO   063
0061:  BCF    08.7
0062:  GOTO   064
0063:  BSF    08.7
0064:  BSF    03.5
0065:  BCF    08.7
....................      
.................... delay_cycles(1);      // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
0066:  NOP
.................... lcd_output_enable(1);   // Tao xung ghi thong tin vao C.LCD. 
0067:  BCF    03.5
0068:  BSF    08.2
0069:  BSF    03.5
006A:  BCF    08.2
.................... delay_us(2);         // Tao tre 2 chu ky (t=2us voi fosc=4MHz). 
006B:  GOTO   06C
.................... lcd_output_enable(0);   // Tao xung ghi thong tin vao LCD - EN = 1->0 (High to Low). 
006C:  BCF    03.5
006D:  BCF    08.2
006E:  BSF    03.5
006F:  BCF    08.2
.................... } 
0070:  BCF    03.5
0071:  RETLW  00
....................  
.................... // *************************************************** 
.................... void lcd_gotoxy(byte x, byte y)   // Ham thiet lap vi tri ghi tren C.LCD (Goc tren ben trai co toa do la 1,1). 
.................... { 
.................... // Khai bao bien. 
.................... byte address; 
.................... // Dinh nghia ham.   
.................... if(y==1)               // Kiem tra vi tri truy xuat thuoc hang 2. 
*
0134:  DECFSZ 2F,W
0135:  GOTO   138
....................    address=lcd_line_one;      // Nap dia chi RAM cua hang 2.  
0136:  CLRF   30
.................... else if(y==2)      // Neu vi tri truy xuat thuoc hang 1. 
0137:  GOTO   14C
0138:  MOVF   2F,W
0139:  SUBLW  02
013A:  BTFSS  03.2
013B:  GOTO   13F
....................    address=lcd_line_two;      // Nap dia chi RAM cua hang 1. 
013C:  MOVLW  40
013D:  MOVWF  30
.................... else if(y==3) 
013E:  GOTO   14C
013F:  MOVF   2F,W
0140:  SUBLW  03
0141:  BTFSS  03.2
0142:  GOTO   146
....................    address=lcd_line_three;      
0143:  MOVLW  14
0144:  MOVWF  30
.................... else if(y==4) 
0145:  GOTO   14C
0146:  MOVF   2F,W
0147:  SUBLW  04
0148:  BTFSS  03.2
0149:  GOTO   14C
....................    address=lcd_line_four;    
014A:  MOVLW  54
014B:  MOVWF  30
....................  
.................... address+=x-1;               // Ghep dia chi cot vao dia chi tong quat (address). address = address + (x-1).       
014C:  MOVLW  01
014D:  SUBWF  2E,W
014E:  ADDWF  30,F
....................                         // Ta qui uoc: Goc tren ben trai co toa do la 1,1 -> Cot dau tien la Cot 1 
....................                         // (x-1) vi C.LCD qui uoc cot dau tien co dia chi la 0. 
.................... lcd_send_byte(0,0x80|address);   // Goi ham truyen thong tin (lenh) sang C.LCD. 
014F:  MOVF   30,W
0150:  IORLW  80
0151:  MOVWF  31
0152:  CLRF   32
0153:  MOVF   31,W
0154:  MOVWF  33
0155:  CALL   0A3
.................... }                        // Lenh: Thiet lap dia chi DDRAM cua C.LCD (addresss).    
0156:  RETLW  00
....................  
.................... // *************************************************** 
.................... char lcd_getc(byte x, byte y)   // Ham tra ve ky tu tai vi tri (x,y) tren C.LCD. 
.................... { 
.................... // Khai bao bien. 
.................... char value; 
.................... // Dinh nghia ham.   
.................... lcd_gotoxy(x,y);            // Xac dinh toa do C.LCD can truy xuat. 
.................... while(bit_test(lcd_read_byte(),7));   // Cho Busy Flag = 0 (C.LCD da xu ly xong). 
.................... lcd_output_rs(1);         // RS = 1 - Databus = Bus du lieu. 
.................... value = lcd_read_byte();   // Doc ve tu C.LCD. 
.................... lcd_output_rs(0);         // RS = 0 - Databus = Bus lenh. 
....................  
.................... return(value);      // Tra ve ma ky tu tai toa do yeu cau. 
.................... } 
....................  
.................... // *************************************************** 
.................... void lcd_putc(char c)   // Ham se hien thi ky tu c tai vi tri ke tiep tren C.LCD. 
.................... { 
.................... // Khai bao bien. 
....................  
.................... // Dinh nghia ham.  
.................... switch (c) 
....................    { 
0157:  MOVF   2D,W
0158:  XORLW  0C
0159:  BTFSC  03.2
015A:  GOTO   162
015B:  XORLW  06
015C:  BTFSC  03.2
015D:  GOTO   16A
015E:  XORLW  02
015F:  BTFSC  03.2
0160:  GOTO   170
0161:  GOTO   175
....................    case '\f':     // Chuc nang xoa hien thi. 
....................       lcd_send_byte(0,0x01);   // Goi ham truyen thong tin (lenh) sang C.LCD. 
0162:  CLRF   32
0163:  MOVLW  01
0164:  MOVWF  33
0165:  CALL   0A3
....................       delay_ms(2);         // Lenh: Xoa hien thi tren man hinh C.LCD (0x01). 
0166:  MOVLW  02
0167:  MOVWF  2E
0168:  CALL   032
....................       break; 
0169:  GOTO   17B
....................    case '\n':       // Chuc nang bat dau hang thu 2. 
....................       lcd_gotoxy(1,0x02);     // Goi ham truyen thong tin (du lieu) sang C.LCD.    
016A:  MOVLW  01
016B:  MOVWF  2E
016C:  MOVLW  02
016D:  MOVWF  2F
016E:  CALL   134
....................       break; 
016F:  GOTO   17B
....................     case '\b':       // Chuc nang lui ve 1 vi tri. 
....................       lcd_send_byte(0,0x10);    // Goi ham truyen thong tin (lenh) sang C.LCD.  
0170:  CLRF   32
0171:  MOVLW  10
0172:  MOVWF  33
0173:  CALL   0A3
....................       break;               // Lenh: Doi con tro sang trai (0x10). 
0174:  GOTO   17B
....................    default:       // Chuc nang hien thi ky tu c tai vi tri ke tiep tren C.LCD. 
....................       lcd_send_byte(1,c);     // Goi ham truyen thong tin (du lieu) sang C.LCD. 
0175:  MOVLW  01
0176:  MOVWF  32
0177:  MOVF   2D,W
0178:  MOVWF  33
0179:  CALL   0A3
....................       break; 
017A:  GOTO   17B
....................    } 
.................... }       
017B:  RETLW  00
.................... // ***************************************************    
....................  
.................... unsigned int16 GIA_TRI =0; 
*
01F2:  BCF    03.6
01F3:  CLRF   20
01F4:  CLRF   21
....................  
.................... void main() 
.................... { 
*
01DF:  CLRF   04
01E0:  BCF    03.7
01E1:  MOVLW  1F
01E2:  ANDWF  03,F
01E3:  BSF    03.5
01E4:  BSF    03.6
01E5:  MOVF   09,W
01E6:  ANDLW  C0
01E7:  MOVWF  09
01E8:  BCF    03.6
01E9:  BCF    1F.4
01EA:  BCF    1F.5
01EB:  MOVLW  00
01EC:  BSF    03.6
01ED:  MOVWF  08
01EE:  BCF    03.5
01EF:  CLRF   07
01F0:  CLRF   08
01F1:  CLRF   09
....................     set_tris_a(0x00); 
*
01F7:  MOVLW  00
01F8:  BSF    03.5
01F9:  MOVWF  05
.................... 	set_tris_b(0x00); 
01FA:  MOVWF  06
.................... 	set_tris_c(0x00); 
01FB:  MOVWF  07
01FC:  BCF    03.5
01FD:  MOVWF  22
....................     set_tris_d(0x00); 
01FE:  BSF    03.5
01FF:  MOVWF  08
....................     set_tris_e(0xFF); 
0200:  BSF    09.0
0201:  BSF    09.1
0202:  BSF    09.2
....................  
....................     SETUP_ADC(ADC_CLOCK_INTERNAL); 
0203:  BCF    03.5
0204:  BSF    1F.6
0205:  BSF    1F.7
0206:  BSF    03.5
0207:  BSF    1F.7
0208:  BCF    03.5
0209:  BSF    1F.0
....................     SETUP_ADC_PORTS(ALL_ANALOG); 
020A:  BSF    03.5
020B:  BSF    03.6
020C:  MOVF   09,W
020D:  ANDLW  C0
020E:  IORLW  1F
020F:  MOVWF  09
0210:  BCF    03.6
0211:  BCF    1F.4
0212:  BCF    1F.5
0213:  MOVLW  FF
0214:  BSF    03.6
0215:  MOVWF  08
....................     lcd_init(); 
0216:  BCF    03.5
0217:  BCF    03.6
0218:  GOTO   0FA
....................     delay_ms(20); 
0219:  MOVLW  14
021A:  MOVWF  2E
021B:  CALL   032
....................     lcd_gotoxy(1,1); 
021C:  MOVLW  01
021D:  MOVWF  2E
021E:  MOVWF  2F
021F:  CALL   134
....................     printf(lcd_putc,"AD10Bit"); 
0220:  CLRF   23
0221:  MOVF   23,W
0222:  CALL   00C
0223:  INCF   23,F
0224:  MOVWF  77
0225:  MOVWF  2D
0226:  CALL   157
0227:  MOVLW  07
0228:  SUBWF  23,W
0229:  BTFSS  03.2
022A:  GOTO   221
....................     
....................     //output_b(0x00); 
....................     while(TRUE) 
....................         {  
.................... 		 
....................         SET_ADC_CHANNEL(5); 
022B:  MOVLW  14
022C:  MOVWF  78
022D:  MOVF   1F,W
022E:  ANDLW  C3
022F:  IORWF  78,W
0230:  MOVWF  1F
....................         GIA_TRI=READ_ADC(); 
0231:  BSF    1F.1
0232:  BTFSC  1F.1
0233:  GOTO   232
0234:  BSF    03.5
0235:  MOVF   1E,W
0236:  BCF    03.5
0237:  MOVWF  20
0238:  MOVF   1E,W
0239:  MOVWF  21
....................         lcd_gotoxy(9,1); 
023A:  MOVLW  09
023B:  MOVWF  2E
023C:  MOVLW  01
023D:  MOVWF  2F
023E:  CALL   134
....................         printf(lcd_putc, "REO: %lu",GIA_TRI); 
023F:  CLRF   23
0240:  MOVF   23,W
0241:  CALL   018
0242:  INCF   23,F
0243:  MOVWF  77
0244:  MOVWF  2D
0245:  CALL   157
0246:  MOVLW  05
0247:  SUBWF  23,W
0248:  BTFSS  03.2
0249:  GOTO   240
024A:  MOVLW  10
024B:  MOVWF  04
024C:  MOVF   21,W
024D:  MOVWF  25
024E:  MOVF   20,W
024F:  MOVWF  24
0250:  CALL   17C
....................          
....................         if(GIA_TRI < 100) 
0251:  MOVF   21,F
0252:  BTFSS  03.2
0253:  GOTO   25D
0254:  MOVF   20,W
0255:  SUBLW  63
0256:  BTFSS  03.0
0257:  GOTO   25D
.................... 		{ 
.................... 		output_b(0x01); 
0258:  BSF    03.5
0259:  CLRF   06
025A:  MOVLW  01
025B:  BCF    03.5
025C:  MOVWF  06
.................... 		} 
....................  
.................... 		if( 200 > GIA_TRI && GIA_TRI >= 100) 
025D:  MOVF   21,F
025E:  BTFSS  03.2
025F:  GOTO   270
0260:  MOVF   20,W
0261:  SUBLW  C7
0262:  BTFSS  03.0
0263:  GOTO   270
0264:  MOVF   21,F
0265:  BTFSS  03.2
0266:  GOTO   26B
0267:  MOVF   20,W
0268:  SUBLW  63
0269:  BTFSC  03.0
026A:  GOTO   270
.................... 		{ 
.................... 		output_b(0x02); 
026B:  BSF    03.5
026C:  CLRF   06
026D:  MOVLW  02
026E:  BCF    03.5
026F:  MOVWF  06
.................... 		} 
....................  
.................... 		if( 300  >= GIA_TRI && GIA_TRI >= 200) 
0270:  MOVF   21,W
0271:  SUBLW  01
0272:  BTFSS  03.0
0273:  GOTO   286
0274:  BTFSS  03.2
0275:  GOTO   27A
0276:  MOVF   20,W
0277:  SUBLW  2C
0278:  BTFSS  03.0
0279:  GOTO   286
027A:  MOVF   21,F
027B:  BTFSS  03.2
027C:  GOTO   281
027D:  MOVF   20,W
027E:  SUBLW  C7
027F:  BTFSC  03.0
0280:  GOTO   286
.................... 		{ 
.................... 		output_b(0x04); 
0281:  BSF    03.5
0282:  CLRF   06
0283:  MOVLW  04
0284:  BCF    03.5
0285:  MOVWF  06
.................... 		} 
....................  
....................         if(400 >= GIA_TRI && GIA_TRI > 300) 
0286:  MOVF   21,W
0287:  SUBLW  01
0288:  BTFSS  03.0
0289:  GOTO   2A0
028A:  BTFSS  03.2
028B:  GOTO   290
028C:  MOVF   20,W
028D:  SUBLW  90
028E:  BTFSS  03.0
028F:  GOTO   2A0
0290:  MOVF   21,W
0291:  SUBLW  00
0292:  BTFSC  03.0
0293:  GOTO   2A0
0294:  XORLW  FF
0295:  BTFSS  03.2
0296:  GOTO   29B
0297:  MOVF   20,W
0298:  SUBLW  2C
0299:  BTFSC  03.0
029A:  GOTO   2A0
.................... 		{ 
.................... 		output_b(0x08); 
029B:  BSF    03.5
029C:  CLRF   06
029D:  MOVLW  08
029E:  BCF    03.5
029F:  MOVWF  06
.................... 		} 
....................  
.................... 		if(500 >= GIA_TRI && GIA_TRI > 400) 
02A0:  MOVF   21,W
02A1:  SUBLW  01
02A2:  BTFSS  03.0
02A3:  GOTO   2BA
02A4:  BTFSS  03.2
02A5:  GOTO   2AA
02A6:  MOVF   20,W
02A7:  SUBLW  F4
02A8:  BTFSS  03.0
02A9:  GOTO   2BA
02AA:  MOVF   21,W
02AB:  SUBLW  00
02AC:  BTFSC  03.0
02AD:  GOTO   2BA
02AE:  XORLW  FF
02AF:  BTFSS  03.2
02B0:  GOTO   2B5
02B1:  MOVF   20,W
02B2:  SUBLW  90
02B3:  BTFSC  03.0
02B4:  GOTO   2BA
.................... 		{ 
.................... 		output_b(0x10); 
02B5:  BSF    03.5
02B6:  CLRF   06
02B7:  MOVLW  10
02B8:  BCF    03.5
02B9:  MOVWF  06
.................... 		} 
....................  
.................... 		if(600 >= GIA_TRI && GIA_TRI > 500) 
02BA:  MOVF   21,W
02BB:  SUBLW  02
02BC:  BTFSS  03.0
02BD:  GOTO   2D4
02BE:  BTFSS  03.2
02BF:  GOTO   2C4
02C0:  MOVF   20,W
02C1:  SUBLW  58
02C2:  BTFSS  03.0
02C3:  GOTO   2D4
02C4:  MOVF   21,W
02C5:  SUBLW  00
02C6:  BTFSC  03.0
02C7:  GOTO   2D4
02C8:  XORLW  FF
02C9:  BTFSS  03.2
02CA:  GOTO   2CF
02CB:  MOVF   20,W
02CC:  SUBLW  F4
02CD:  BTFSC  03.0
02CE:  GOTO   2D4
.................... 		{ 
.................... 		output_b(0x20); 
02CF:  BSF    03.5
02D0:  CLRF   06
02D1:  MOVLW  20
02D2:  BCF    03.5
02D3:  MOVWF  06
.................... 		} 
.................... 		if(700 >= GIA_TRI && GIA_TRI > 600) 
02D4:  MOVF   21,W
02D5:  SUBLW  02
02D6:  BTFSS  03.0
02D7:  GOTO   2EE
02D8:  BTFSS  03.2
02D9:  GOTO   2DE
02DA:  MOVF   20,W
02DB:  SUBLW  BC
02DC:  BTFSS  03.0
02DD:  GOTO   2EE
02DE:  MOVF   21,W
02DF:  SUBLW  01
02E0:  BTFSC  03.0
02E1:  GOTO   2EE
02E2:  XORLW  FF
02E3:  BTFSS  03.2
02E4:  GOTO   2E9
02E5:  MOVF   20,W
02E6:  SUBLW  58
02E7:  BTFSC  03.0
02E8:  GOTO   2EE
.................... 		{ 
.................... 		output_b(0x40); 
02E9:  BSF    03.5
02EA:  CLRF   06
02EB:  MOVLW  40
02EC:  BCF    03.5
02ED:  MOVWF  06
.................... 		} 
....................  
.................... 		if(800 >= GIA_TRI && GIA_TRI > 700) 
02EE:  MOVF   21,W
02EF:  SUBLW  03
02F0:  BTFSS  03.0
02F1:  GOTO   308
02F2:  BTFSS  03.2
02F3:  GOTO   2F8
02F4:  MOVF   20,W
02F5:  SUBLW  20
02F6:  BTFSS  03.0
02F7:  GOTO   308
02F8:  MOVF   21,W
02F9:  SUBLW  01
02FA:  BTFSC  03.0
02FB:  GOTO   308
02FC:  XORLW  FF
02FD:  BTFSS  03.2
02FE:  GOTO   303
02FF:  MOVF   20,W
0300:  SUBLW  BC
0301:  BTFSC  03.0
0302:  GOTO   308
.................... 		{ 
.................... 		output_b(0x80); 
0303:  BSF    03.5
0304:  CLRF   06
0305:  MOVLW  80
0306:  BCF    03.5
0307:  MOVWF  06
.................... 		} 
.................... 		if(900 >= GIA_TRI && GIA_TRI > 800) 
0308:  MOVF   21,W
0309:  SUBLW  03
030A:  BTFSS  03.0
030B:  GOTO   32C
030C:  BTFSS  03.2
030D:  GOTO   312
030E:  MOVF   20,W
030F:  SUBLW  84
0310:  BTFSS  03.0
0311:  GOTO   32C
0312:  MOVF   21,W
0313:  SUBLW  02
0314:  BTFSC  03.0
0315:  GOTO   32C
0316:  XORLW  FF
0317:  BTFSS  03.2
0318:  GOTO   31D
0319:  MOVF   20,W
031A:  SUBLW  20
031B:  BTFSC  03.0
031C:  GOTO   32C
.................... 		{ 
.................... 		output_b(0xff); 
031D:  BSF    03.5
031E:  CLRF   06
031F:  MOVLW  FF
0320:  BCF    03.5
0321:  MOVWF  06
.................... 		delay_ms(100); 
0322:  MOVLW  64
0323:  MOVWF  2E
0324:  CALL   032
.................... 		output_b(0x00); 
0325:  BSF    03.5
0326:  CLRF   06
0327:  BCF    03.5
0328:  CLRF   06
.................... 		delay_ms(100); 
0329:  MOVLW  64
032A:  MOVWF  2E
032B:  CALL   032
.................... 		} 
.................... 		if(GIA_TRI > 900) 
032C:  MOVF   21,W
032D:  SUBLW  02
032E:  BTFSC  03.0
032F:  GOTO   33C
0330:  XORLW  FF
0331:  BTFSS  03.2
0332:  GOTO   337
0333:  MOVF   20,W
0334:  SUBLW  84
0335:  BTFSC  03.0
0336:  GOTO   33C
.................... 		{ 
.................... 		output_b(0xff); 
0337:  BSF    03.5
0338:  CLRF   06
0339:  MOVLW  FF
033A:  BCF    03.5
033B:  MOVWF  06
.................... 		} 
....................  
....................  
....................         GIA_TRI=GIA_TRI-GIA_TRI; 
033C:  CLRF   20
033D:  CLRF   21
....................         SET_ADC_CHANNEL(6); 
033E:  MOVLW  18
033F:  MOVWF  78
0340:  MOVF   1F,W
0341:  ANDLW  C3
0342:  IORWF  78,W
0343:  MOVWF  1F
....................         GIA_TRI=READ_ADC();  
0344:  BSF    1F.1
0345:  BTFSC  1F.1
0346:  GOTO   345
0347:  BSF    03.5
0348:  MOVF   1E,W
0349:  BCF    03.5
034A:  MOVWF  20
034B:  MOVF   1E,W
034C:  MOVWF  21
....................         lcd_gotoxy(9,2); 
034D:  MOVLW  09
034E:  MOVWF  2E
034F:  MOVLW  02
0350:  MOVWF  2F
0351:  CALL   134
....................         printf(lcd_putc, "RE1: %lu",GIA_TRI); 
0352:  CLRF   23
0353:  MOVF   23,W
0354:  CALL   025
0355:  INCF   23,F
0356:  MOVWF  77
0357:  MOVWF  2D
0358:  CALL   157
0359:  MOVLW  05
035A:  SUBWF  23,W
035B:  BTFSS  03.2
035C:  GOTO   353
035D:  MOVLW  10
035E:  MOVWF  04
035F:  MOVF   21,W
0360:  MOVWF  25
0361:  MOVF   20,W
0362:  MOVWF  24
0363:  CALL   17C
.................... 		 
.................... 		if(GIA_TRI < 100) 
0364:  MOVF   21,F
0365:  BTFSS  03.2
0366:  GOTO   372
0367:  MOVF   20,W
0368:  SUBLW  63
0369:  BTFSS  03.0
036A:  GOTO   372
.................... 		{ 
.................... 		output_c(0x01); 
036B:  MOVLW  00
036C:  MOVWF  22
036D:  BSF    03.5
036E:  CLRF   07
036F:  MOVLW  01
0370:  BCF    03.5
0371:  MOVWF  07
.................... 		} 
....................  
.................... 		if( 200 > GIA_TRI && GIA_TRI >= 100) 
0372:  MOVF   21,F
0373:  BTFSS  03.2
0374:  GOTO   387
0375:  MOVF   20,W
0376:  SUBLW  C7
0377:  BTFSS  03.0
0378:  GOTO   387
0379:  MOVF   21,F
037A:  BTFSS  03.2
037B:  GOTO   380
037C:  MOVF   20,W
037D:  SUBLW  63
037E:  BTFSC  03.0
037F:  GOTO   387
.................... 		{ 
.................... 		output_c(0x02); 
0380:  MOVLW  00
0381:  MOVWF  22
0382:  BSF    03.5
0383:  CLRF   07
0384:  MOVLW  02
0385:  BCF    03.5
0386:  MOVWF  07
.................... 		} 
....................  
.................... 		if( 300  >= GIA_TRI && GIA_TRI >= 200) 
0387:  MOVF   21,W
0388:  SUBLW  01
0389:  BTFSS  03.0
038A:  GOTO   39F
038B:  BTFSS  03.2
038C:  GOTO   391
038D:  MOVF   20,W
038E:  SUBLW  2C
038F:  BTFSS  03.0
0390:  GOTO   39F
0391:  MOVF   21,F
0392:  BTFSS  03.2
0393:  GOTO   398
0394:  MOVF   20,W
0395:  SUBLW  C7
0396:  BTFSC  03.0
0397:  GOTO   39F
.................... 		{ 
.................... 		output_c(0x04); 
0398:  MOVLW  00
0399:  MOVWF  22
039A:  BSF    03.5
039B:  CLRF   07
039C:  MOVLW  04
039D:  BCF    03.5
039E:  MOVWF  07
.................... 		} 
....................  
....................         if(400 >= GIA_TRI && GIA_TRI > 300) 
039F:  MOVF   21,W
03A0:  SUBLW  01
03A1:  BTFSS  03.0
03A2:  GOTO   3BB
03A3:  BTFSS  03.2
03A4:  GOTO   3A9
03A5:  MOVF   20,W
03A6:  SUBLW  90
03A7:  BTFSS  03.0
03A8:  GOTO   3BB
03A9:  MOVF   21,W
03AA:  SUBLW  00
03AB:  BTFSC  03.0
03AC:  GOTO   3BB
03AD:  XORLW  FF
03AE:  BTFSS  03.2
03AF:  GOTO   3B4
03B0:  MOVF   20,W
03B1:  SUBLW  2C
03B2:  BTFSC  03.0
03B3:  GOTO   3BB
.................... 		{ 
.................... 		output_c(0x08); 
03B4:  MOVLW  00
03B5:  MOVWF  22
03B6:  BSF    03.5
03B7:  CLRF   07
03B8:  MOVLW  08
03B9:  BCF    03.5
03BA:  MOVWF  07
.................... 		} 
....................  
.................... 		if(500 >= GIA_TRI && GIA_TRI > 400) 
03BB:  MOVF   21,W
03BC:  SUBLW  01
03BD:  BTFSS  03.0
03BE:  GOTO   3D7
03BF:  BTFSS  03.2
03C0:  GOTO   3C5
03C1:  MOVF   20,W
03C2:  SUBLW  F4
03C3:  BTFSS  03.0
03C4:  GOTO   3D7
03C5:  MOVF   21,W
03C6:  SUBLW  00
03C7:  BTFSC  03.0
03C8:  GOTO   3D7
03C9:  XORLW  FF
03CA:  BTFSS  03.2
03CB:  GOTO   3D0
03CC:  MOVF   20,W
03CD:  SUBLW  90
03CE:  BTFSC  03.0
03CF:  GOTO   3D7
.................... 		{ 
.................... 		output_c(0x10); 
03D0:  MOVLW  00
03D1:  MOVWF  22
03D2:  BSF    03.5
03D3:  CLRF   07
03D4:  MOVLW  10
03D5:  BCF    03.5
03D6:  MOVWF  07
.................... 		} 
....................  
.................... 		if(600 >= GIA_TRI && GIA_TRI > 500) 
03D7:  MOVF   21,W
03D8:  SUBLW  02
03D9:  BTFSS  03.0
03DA:  GOTO   3F3
03DB:  BTFSS  03.2
03DC:  GOTO   3E1
03DD:  MOVF   20,W
03DE:  SUBLW  58
03DF:  BTFSS  03.0
03E0:  GOTO   3F3
03E1:  MOVF   21,W
03E2:  SUBLW  00
03E3:  BTFSC  03.0
03E4:  GOTO   3F3
03E5:  XORLW  FF
03E6:  BTFSS  03.2
03E7:  GOTO   3EC
03E8:  MOVF   20,W
03E9:  SUBLW  F4
03EA:  BTFSC  03.0
03EB:  GOTO   3F3
.................... 		{ 
.................... 		output_c(0x20); 
03EC:  MOVLW  00
03ED:  MOVWF  22
03EE:  BSF    03.5
03EF:  CLRF   07
03F0:  MOVLW  20
03F1:  BCF    03.5
03F2:  MOVWF  07
.................... 		} 
.................... 		if(700 >= GIA_TRI && GIA_TRI > 600) 
03F3:  MOVF   21,W
03F4:  SUBLW  02
03F5:  BTFSS  03.0
03F6:  GOTO   40F
03F7:  BTFSS  03.2
03F8:  GOTO   3FD
03F9:  MOVF   20,W
03FA:  SUBLW  BC
03FB:  BTFSS  03.0
03FC:  GOTO   40F
03FD:  MOVF   21,W
03FE:  SUBLW  01
03FF:  BTFSC  03.0
0400:  GOTO   40F
0401:  XORLW  FF
0402:  BTFSS  03.2
0403:  GOTO   408
0404:  MOVF   20,W
0405:  SUBLW  58
0406:  BTFSC  03.0
0407:  GOTO   40F
.................... 		{ 
.................... 		output_c(0x40); 
0408:  MOVLW  00
0409:  MOVWF  22
040A:  BSF    03.5
040B:  CLRF   07
040C:  MOVLW  40
040D:  BCF    03.5
040E:  MOVWF  07
.................... 		} 
....................  
.................... 		if(800 >= GIA_TRI && GIA_TRI > 700) 
040F:  MOVF   21,W
0410:  SUBLW  03
0411:  BTFSS  03.0
0412:  GOTO   42B
0413:  BTFSS  03.2
0414:  GOTO   419
0415:  MOVF   20,W
0416:  SUBLW  20
0417:  BTFSS  03.0
0418:  GOTO   42B
0419:  MOVF   21,W
041A:  SUBLW  01
041B:  BTFSC  03.0
041C:  GOTO   42B
041D:  XORLW  FF
041E:  BTFSS  03.2
041F:  GOTO   424
0420:  MOVF   20,W
0421:  SUBLW  BC
0422:  BTFSC  03.0
0423:  GOTO   42B
.................... 		{ 
.................... 		output_c(0x80); 
0424:  MOVLW  00
0425:  MOVWF  22
0426:  BSF    03.5
0427:  CLRF   07
0428:  MOVLW  80
0429:  BCF    03.5
042A:  MOVWF  07
.................... 		} 
.................... 		if(900 >= GIA_TRI && GIA_TRI > 800) 
042B:  MOVF   21,W
042C:  SUBLW  03
042D:  BTFSS  03.0
042E:  GOTO   453
042F:  BTFSS  03.2
0430:  GOTO   435
0431:  MOVF   20,W
0432:  SUBLW  84
0433:  BTFSS  03.0
0434:  GOTO   453
0435:  MOVF   21,W
0436:  SUBLW  02
0437:  BTFSC  03.0
0438:  GOTO   453
0439:  XORLW  FF
043A:  BTFSS  03.2
043B:  GOTO   440
043C:  MOVF   20,W
043D:  SUBLW  20
043E:  BTFSC  03.0
043F:  GOTO   453
.................... 		{ 
.................... 		output_c(0xff); 
0440:  MOVLW  00
0441:  MOVWF  22
0442:  BSF    03.5
0443:  CLRF   07
0444:  MOVLW  FF
0445:  BCF    03.5
0446:  MOVWF  07
.................... 		delay_ms(100); 
0447:  MOVLW  64
0448:  MOVWF  2E
0449:  CALL   032
.................... 		output_c(0x00); 
044A:  MOVLW  00
044B:  MOVWF  22
044C:  BSF    03.5
044D:  CLRF   07
044E:  BCF    03.5
044F:  CLRF   07
.................... 		delay_ms(100); 
0450:  MOVLW  64
0451:  MOVWF  2E
0452:  CALL   032
.................... 		} 
.................... 		if(GIA_TRI > 900) 
0453:  MOVF   21,W
0454:  SUBLW  02
0455:  BTFSC  03.0
0456:  GOTO   465
0457:  XORLW  FF
0458:  BTFSS  03.2
0459:  GOTO   45E
045A:  MOVF   20,W
045B:  SUBLW  84
045C:  BTFSC  03.0
045D:  GOTO   465
.................... 		{ 
.................... 		output_c(0xff); 
045E:  MOVLW  00
045F:  MOVWF  22
0460:  BSF    03.5
0461:  CLRF   07
0462:  MOVLW  FF
0463:  BCF    03.5
0464:  MOVWF  07
.................... 		} 
....................     } 
0465:  GOTO   22B
.................... } 
0466:  SLEEP

Configuration Fuses:
   Word  1: 2FF2   HS NOWDT NOPUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   NOWRT BORV40
